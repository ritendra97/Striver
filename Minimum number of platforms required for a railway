//Minimum number of platforms required for a railway

public class Java {

	   public static int findPlatform(int[] arr, int[] dep, int n) {
		   int result = 1;
		   for (int i = 0; i < n; i++) {

			   int platform = 1;
			   for (int j = i + 1; j < n; j++) {

				    if (arr[j] <= dep[i] && arr[j] >= arr[i] || arr[i] >= arr[j] && arr[j] <= dep[i])
					     platform++;
			   }

			   result = Math.max(result, platform);
		   }
		  return result;
	  }

	  public static void main(String[] args) {

		  int arr[] = { 900, 940, 950, 1100, 1500, 1800 };
		  int dep[] = { 910, 1200, 1120, 1130, 1900, 2000 };
		  int n = 6;
		  System.out.println("Minimum Number of Platforms Required = " + findPlatform(arr, dep, n));
	}
}

import java.util.*;

public class Solution {

	public static int findPlatform(int arr[], int dep[], int n) {
		int curr_need = 1;
		int overall_need = 1;
		Arrays.sort(arr);
		Arrays.sort(dep);
		int i = 1;
		int j = 0;
		while (i < arr.length && j < dep.length) {
			if (arr[i] <= dep[j]) {
				i++;
				curr_need += 1;
			} else if (arr[i] > dep[j]) {
				j++;
				curr_need--;
			}
			if (overall_need < curr_need)
				overall_need = curr_need;
		}
		return overall_need;
	}

	public static void main(String[] args) {
		int arr[] = { 900, 940, 950, 1100, 1500, 1800 };
		int dep[] = { 910, 1200, 1120, 1130, 1900, 2000 };
		int n = 6;
		System.out.println("Minimum Number of Platforms Required = " + findPlatform(arr, dep, n));
	}
}
