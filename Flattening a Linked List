//Flattening a Linked List

import java.util.ArrayList;
import java.util.Queue;
import java.util.LinkedList;

public class Main2 {

	class Node {
		int data;
		Node right, down;

		Node(int data) {
			this.data = data;
			right = null;
			down = null;
		}
	}

	Node head;

	Node push(Node head_ref, int data) {
		Node new_node = new Node(data);
		new_node.down = head_ref;
		head_ref = new_node;
		return head_ref;
	}

	public void Solution(Node node) {
		Queue<Node> q = new LinkedList<>();
		q.add(node);

		ArrayList<Integer> result = new ArrayList<>();
		while (!q.isEmpty()) {
			Node n = q.remove();
			while (n != null) {
				if (n.right != null) {
					q.add(n.right);
				}
				result.add(n.data);
				n = n.down;
			}
		}
		result.stream().forEach(System.out::println);
	}

	public static void main(String[] args) {

		Main2 L = new Main2();
		L.head = L.push(L.head, 30);
		L.head = L.push(L.head, 8);
		L.head = L.push(L.head, 7);
		L.head = L.push(L.head, 5);

		L.head.right = L.push(L.head.right, 20);
		L.head.right = L.push(L.head.right, 10);

		L.head.right.right = L.push(L.head.right.right, 50);
		L.head.right.right = L.push(L.head.right.right, 22);
		L.head.right.right = L.push(L.head.right.right, 19);

		L.head.right.right.right = L.push(L.head.right.right.right, 45);
		L.head.right.right.right = L.push(L.head.right.right.right, 40);
		L.head.right.right.right = L.push(L.head.right.right.right, 35);
		L.head.right.right.right = L.push(L.head.right.right.right, 20);

		L.Solution(L.head);
	}
}

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class Main4 {

    class Node
    {
        int data;
        Node right, down;
        Node(int data)
        {
            this.data = data;
            right = null;
            down = null;
        }
    }
    Node head;

    Node push(Node head_ref, int data)
    {
        Node new_node = new Node(data);
        new_node.down = head_ref;
        head_ref = new_node;
        return head_ref;
    }

    public Node mergeTwoSortedArray(Node a, Node b){

        Node temp = new Node(0);
        Node res = temp;

        if(a.data<b.data){
            temp.down = a;
            temp = temp.down;
            a=a.down;
        }else{
            temp.down = b;
            temp = temp.down;
            b=b.down;
        }
        if(a!=null){
            temp.down = a;
        }else{
            temp.down = b;
        }
        return res.down;
    }

    public Node Solution(Node root){

        if(root==null || root.right==null) return root;
        root.right = Solution(root.right);
        root = mergeTwoSortedArray(root,root.right);
        return root;
    }
    public static void main(String[] args){

        Main4 L = new Main4();
        L.head = L.push(L.head, 30);
        L.head = L.push(L.head, 8);
        L.head = L.push(L.head, 7);
        L.head = L.push(L.head, 5);

        L.head.right = L.push(L.head.right, 20);
        L.head.right = L.push(L.head.right, 10);

        L.head.right.right = L.push(L.head.right.right, 50);
        L.head.right.right = L.push(L.head.right.right, 22);
        L.head.right.right = L.push(L.head.right.right, 19);

        L.head.right.right.right = L.push(L.head.right.right.right, 45);
        L.head.right.right.right = L.push(L.head.right.right.right, 40);
        L.head.right.right.right = L.push(L.head.right.right.right, 35);
        L.head.right.right.right = L.push(L.head.right.right.right, 20);

        L.Solution(L.head);
    }
}
