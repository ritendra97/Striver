//Trapping rain water


Take a variable maxWater to store maximum water and initialize it with 0
For every index of the array, do the following
Find the highest bar on its left and store it in leftHeight
Find the highest bar on its right and store it in rightHeight
Update maxWater with maxWater + min(leftHeight, rightHeight)-arr[i]
3. Return maxWater

Pseudo Code
int maxWaterTrapped(int[] height, int size) {
    int maxWater = 0
    for (int i = 1 to size-1) {
        int leftHeight = height[i]
        for (int j = 0 to i)
            leftHeight = max(leftHeight, height[j])
        int rightHeight = height[i]
        for (int j = i+1 to size) 
            rightHeight = max(rightHeight, height[j])
        // Update the maximum water 
        maxWater = maxWater + (min(leftHeight, rightHeight) - height[i])
    }
    return maxWater
}


package water;

public class WaterTrapping 
{
	static void water(int nums[],int n)
	{
		int maxl[]=new int[n];
		int maxr[]=new int[n];
		int sum=0;
		maxl[0]=nums[0];
		for(int i=1;i<n;i++)
		{
			maxl[i]=Math.max(maxl[i-1], nums[i]);
		}
		maxr[n-1]=nums[n-1];
		for(int i=n-2;i>=0;i--)
		{
			maxr[i]=Math.max(maxr[i+1], nums[i]);
		}
		for(int i=0;i<n;i++)
		{
			sum+=(Math.min(maxl[i],maxr[i])-nums[i]);
		}
		System.out.println("The sum is: "+sum);
	}
	public static void main(String[] args) 
	{
		int nums[]= {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
		int n=nums.length;
		water(nums,n);
	}
}
// JAVA Code For Trapping Rain Water
import java.util.*;

class GFG {

	static int findWater(int arr[], int n)
	{
		// initialize output
		int result = 0;

		// maximum element on left and right
		int left_max = 0, right_max = 0;

		// indices to traverse the array
		int lo = 0, hi = n - 1;

		while (lo <= hi) {
			if (arr[lo] < arr[hi]) {
				if (arr[lo] > left_max)

					// update max in left
					left_max = arr[lo];
				else

					// water on curr element =
					// max - curr
					result += left_max - arr[lo];
				lo++;
			}
			else {
				if (arr[hi] > right_max)

					// update right maximum
					right_max = arr[hi];

				else
					result += right_max - arr[hi];
				hi--;
			}
		}

		return result;
	}

	/* Driver program to test above function */
	public static void main(String[] args)
	{
		int arr[] = { 0, 1, 0, 2, 1, 0, 1,
					3, 2, 1, 2, 1 };
		int n = arr.length;

		System.out.println("Maximum water that "
						+ "can be accumulated is "
						+ findWater(arr, n));
	}
}
// This code is contributed by Arnav Kr. Mandal.
